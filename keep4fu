/*
		// getting pods
		log.Printf("Getting Pods")
		pods, err := clientset.CoreV1().Pods("").List(metav1.ListOptions{})
		if err != nil {
			log.Fatalln("failed to get pods:", err)
		}

		// print pods
		for i, pod := range pods.Items {

			// check the service account running the pod
			if pod.Spec.ServiceAccountName == "default" {
				fmt.Printf(
					"%d,%s,%s,%s,%s,%s\n",
					i,
					pod.ObjectMeta.OwnerReferences[0].UID,
					pod.GetName(),
					pod.GetNamespace(),
					pod.ObjectMeta.OwnerReferences[0].Kind,
					"Pod running with [default] ServiceAccount",
				)
				// TODO: how to get the UID of the parent
				// TODO: add the pod to an array of all accounts using default service accounts
			}

			if pod.GetNamespace() == "default" {
				fmt.Printf(
					"%d,%s,%s,%s,%s,%s\n",
					i,
					pod.ObjectMeta.OwnerReferences[0].UID,
					pod.GetName(),
					pod.GetNamespace(),
					pod.ObjectMeta.OwnerReferences[0].Kind,
					"Pod running in [default] namespace",
				)
				//TODO: add the pod to an array of all accounts using default service accounts
			}

			// TODO: is not set - will populate manually.
			fmt.Printf("Cluster Name: %s\n", pod.ObjectMeta.ClusterName)
			// uncomment to print all labels and annotations - FFU
			/*
				fmt.Println("---Labels---")
				for k, v := range pod.ObjectMeta.Labels {
					fmt.Printf("Key [%s] value [%s]\n", k, v)
				}

				fmt.Println("---Annotations---")
				for k, v := range pod.ObjectMeta.Annotations {
					fmt.Printf("Key [%s] value [%s]\n", k, v)
				}


			// iterating over the pod's volumes
			// TODO - find out how to iterate and get only those with Write access
			for i, vol := range pod.Spec.Volumes {
				fmt.Printf("Volume[%d] - Name [%s]\n", i, vol.Name)

				// TODO: need to identify the VolSource
			}
		}

			serviceAccounts, err := clientset.CoreV1().ServiceAccounts("").List(metav1.ListOptions{})

			// print service accounts
			for i, sa := range serviceAccounts.Items {
				fmt.Printf("[%d] %s\n", i, sa.GetName())
			}


		// all services
		log.Printf("Getting Services")
		services, err := clientset.CoreV1().Services("").List(metav1.ListOptions{})
		if err != nil {
			log.Fatalln("failed to get services:", err)
		}

		for i, service := range services.Items {
			fmt.Printf("[%d] - [%s]\n", i, service.GetName())
		}
	*/
